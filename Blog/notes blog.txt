TITLE FRONTEND

    FORMS:
        тЪая╕П without the name field we get errors in the form submition!!!

        Accessing the values of a field with 
            event.target.elements.username

    LOG IN 

        тЪая╕П when logging in you should encrypt the password on the frontend as swell as in the backend

    LOG OUT 

        If using cookies the logout is simple:

         Just set the cookie to a empty string in a logout link click and connect with the db

            app.post('/logout', (req, res) => {
                res.cookie('token', '').json('ok');
            })


    REACT QUILL wysiwyg  editor for blogs, posts, emails...
        import ReactQuill from 'react-quill';
        import 'react-quill/dist/quill.snow.css';



SENDING FILES: MULTER LIBRARY 

    Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of busboy for maximum efficiency.

    To grab files from a request in the backend we use multer.


TITLE BACKEND

    MORGAN MIDDLEWARE

        adds a log with method url, response, time ... to the console

        ЁЯЪй OPTIONS /register is related to the preflight request sent 
         by the browser when making a cross-origin HTTP request with certain methods or headers.

            When you make a POST request to a server from a frontend application running in a browser, the browser may send an OPTIONS request first to check if the server allows the actual request to be made. This is part of the CORS (Cross-Origin Resource Sharing) mechanism.

LOGIN END POINT 1:22M
COOKIES COLLECTING DATA FROM THEM 1:25MIN


тЪая╕П Always forget !!!!! const response = await fetch('x');
        const response = await fetch('x');
        const data = await response.json();



тЪая╕П Response to the client with the structure ?
    res.json({file: req.file}) or 
    res.json(req.file) they both work


тЪая╕П Renaming photo file with fs library 

тЪая╕П Server 4000 frontend 3000, Server Endpoints errors fail to fetchcheck This

    Add Get, post or put requests to the methods to allow them in the corsOptions otherwise you get fail to fetch

    const corsOptions = {
    origin: 'http://localhost:3000',
    methods: ['GET', 'POST', 'PUT'],
    allowedHeaders: ['Content-Type', 'Authorization'],
    credentials: true,
    };

тЪая╕П Frontend expects json response and gets a html for errors big problem hard to find

useEffect(() => {
  const fetchData = async () => {
    const response = await fetch('http://localhost:4000/profile', {
      credentials: 'include',
    });

        тЪая╕П Backend part that was commented out.
            if (!token) {
                res.json('Please log in'); тЪая╕П response given here!
            }

        And in the line above I had commented out the response so in postman
        you can see when the response is wrong it throws html. When I turn on the this part of the backend code which is where I give a json response

    ЁЯЪй Response here -----------------
    const userData = await response.json(); тЪая╕П frontend expects json, instead got html
    -------------Ends Response


  }
  fetchData();
}, []);